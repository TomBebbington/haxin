{"ts":1372678385466,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"package haxin;\nimport haxe.macro.*;\nimport haxe.macro.Expr;\nimport haxe.macro.Type;\nusing haxe.macro.ExprTools;\nusing haxe.macro.TypeTools;\nusing haxe.macro.ComplexTypeTools;\nimport llvm.ir.*;\nimport llvm.support.*;\nimport llvm.*;\nusing StringTools;\nclass HaxeGen {\n\tvar ctx:LLVMContext;\n\tpublic var fields:Array<Field>;\n\tpublic var name:String;\n\tpublic var path:String;\n\tpublic var pos:Position;\n\tpublic function new(path:String) {\n\t\tthis.path = path;\n\t\tpos = {min: 0, max: 0, file: path};\n\t\tname = toHaxeName(path);\n\t\tfields = [];\n\t\tfields.push({\n\t\t\tname: \"main\",\n\t\t\tkind: FFun({\n\t\t\t\tret: macro:Void,\n\t\t\t\tparams: [],\n\t\t\t\targs: [],\n\t\t\t\texpr: macro trace(\"Hello, world!\")\n\t\t\t}),\n\t\t\tpos: pos,\n\t\t\taccess: [APublic, AStatic]\n\t\t});\n\t\tctx = new LLVMContext();\n\t}\n\tpublic function toString():String {\n\t\tvar f = [for(f in fields) {\n\t\t\tvar b = new StringBuf();\n\t\t\tb.add(\"\\t\");\n\t\t\tif(f.access != null)\n\t\t\t\tfor(a in f.access) {\n\t\t\t\t\tb.add((switch(a) {\n\t\t\t\t\t\tcase AStatic: \"static\";\n\t\t\t\t\t\tcase APublic: \"public\";\n\t\t\t\t\t\tcase APrivate: \"private\";\n\t\t\t\t\t\tcase AOverride: \"override\";\n\t\t\t\t\t\tcase AMacro: \"macro\";\n\t\t\t\t\t\tcase AInline: \"inline\";\n\t\t\t\t\t\tcase ADynamic: \"dynamic\";\n\t\t\t\t\t})+\" \");\n\t\t\t\t}\n\t\t\tswitch(f.kind) {\n\t\t\t\tcase FieldType.FVar(t, e):\n\t\t\t\t\tb.add(\"var \");\n\t\t\t\t\tb.add(f.name);\n\t\t\t\t\tif(t != null)\n\t\t\t\t\t\tb.add(' ${t.toString()}');\n\t\t\t\tcase FFun(fn):\n\t\t\t\t\tb.add(\"function \");\n\t\t\t\t\tb.add(f.name);\n\t\t\t\t\tb.add(\"(\");\n\t\t\t\t\tb.add([for(a in fn.args)\n\t\t\t\t\t\ta.type == null ? a.name : '${a.name}:${a.type.toString()}'\n\t\t\t\t\t].join(\", \"));\n\t\t\t\t\tb.add(\")\");\n\t\t\t\t\tif(fn.ret != null)\n\t\t\t\t\t\tb.add(':${fn.ret.toString()} ');\n\t\t\t\t\tb.add(fn.expr.toString().replace(\"\\n\", \"\\n\\t\\t\"));\n\t\t\t\tcase FieldType.FProp(get, set, t, e): b.add(\"var\");\n\t\t\t}\n\t\t\tb.toString();\n\t\t}].join(\"\\n\");\n\t\treturn 'class $name {\\n$f\\n}';\n\t}\n\tstatic function haxeFilter(n:String, camel:Bool=true) {\n\t\tvar notAllowed = \"./+_-\";\n\t\tfor(i in 0...notAllowed.length) {\n\t\t\tvar c = notAllowed.charAt(i);\n\t\t\tvar found = 0;\n\t\t\tvar count = 0;\n\t\t\twhile((found = n.indexOf(c)) != -1 && count++ < 500) {\n\t\t\t\tif(camel)\n\t\t\t\t\tn = n.substr(0, found) + n.substr(found+1, 1) + n.substr(c.length+1);\n\t\t\t\telse\n\t\t\t\t\tn = n.substr(0, found) + \"_\" + n.substr(c.length);\n\t\t\t}\n\t\t}\n\t\tif(n == \"main\")\n\t\t\tn = \"_main\";\n\t\treturn n;\n\t}\n\tstatic function toHaxeName(n:String) {\n\t\tif(n.endsWith(\".bc\")) n = n.substr(0, n.length-3);\n\t\tn = n.substr(n.indexOf(\".\") + 1);\n\t\tn = n.substr(n.lastIndexOf(\"/\") + 1);\n\t\tn = haxeFilter(n, true);\n\t\tvar parts:Array<String> = n.split(\"::\");\n\t\tvar last = parts[parts.length -1];\n\t\tparts[parts.length - 1] = last.charAt(0).toUpperCase() + last.substr(1);\n\t\tn = parts.join(\".\");\n\t\treturn n;\n\t}\n}"]],"start1":0,"start2":0,"length1":0,"length2":2634}]],"length":2634}
{"contributors":[],"silentsave":false,"ts":1372678352130,"patch":[[{"diffs":[[0,"g {\n"],[-1,"\t\tvar f = [for(f in fields) {\n\t\t\tvar b = new StringBuf();\n\t\t\tb.add(\"\\t\");\n\t\t\tif(f.access != null)\n\t\t\t\tfor(a in f.access) {\n\t\t\t\t\tb.add((switch(a) {\n\t\t\t\t\t\tcase AStatic: \"static\";\n\t\t\t\t\t\tcase APublic: \"public\";\n\t\t\t\t\t\tcase APrivate: \"private\";\n\t\t\t\t\t\tcase AOverride: \"override\";\n\t\t\t\t\t\tcase AMacro: \"macro\";\n\t\t\t\t\t\tcase AInline: \"inline\";\n\t\t\t\t\t\tcase ADynamic: \"dynamic\";\n\t\t\t\t\t})+\" \");\n\t\t\t\t}\n\t\t\tswitch(f.kind) {\n\t\t\t\tcase FieldType.FVar(t, e):\n\t\t\t\t\tb.add(\"var \");\n\t\t\t\t\tb.add(f.name);\n\t\t\t\t\tif(t != null)\n\t\t\t\t\t\tb.add(' ${t.toString()}');\n\t\t\t\tcase FFun(fn):\n\t\t\t\t\tb.add(\"function \");\n\t\t\t\t\tb.add(f.name);\n\t\t\t\t\tb.add(\"(\");\n\t\t\t\t\tb.add([for(a in fn.args)\n\t\t\t\t\t\ta.type == null ? a.name : '${a.name}:${a.type.toString()}'\n\t\t\t\t\t].join(\", \"));\n\t\t\t\t\tb.add(\")\");\n\t\t\t\t\tif(fn.ret != null)\n\t\t\t\t\t\tb.add(':${fn.ret.toString()} ');\n\t\t\t\t\tb.add(fn.expr.toString().replace(\"\\n\", \"\\n\\t\\t\"));\n\t\t\t\tcase FieldType.FProp(get, set, t, e): b.add(\"var\");\n\t\t\t}\n\t\t\tb.toString();\n\t\t}].join(\"\\n\");\n\t\treturn 'class $name {\\n$f\\n}'"],[1,"        var td:TypeDeclaration = {\n              \n        }"],[0,";\n\t}"]],"start1":791,"start2":791,"length1":992,"length2":67}]],"length":1709,"saved":false}
{"ts":1372678374429,"patch":[[{"diffs":[[0,"n = "],[-1,"\"_main\""],[1,"'_$n'"],[0,";\n\t\t"]],"start1":1291,"start2":1291,"length1":15,"length2":13}]],"length":1707,"saved":false}
{"ts":1372678446934,"patch":[[{"diffs":[[0,"     };\n"],[1,"        return new Printer.printTypeDeclaration(td);\n"],[0,"\t}\n\tstat"]],"start1":848,"start2":848,"length1":16,"length2":69}]],"length":1760,"saved":false}
{"ts":1372678824573,"patch":[[{"diffs":[[0,"ar td:TypeDe"],[-1,"clara"],[1,"fini"],[0,"tion = {\n   "]],"start1":804,"start2":804,"length1":29,"length2":28}]],"length":1759,"saved":false}
{"ts":1372678888887,"patch":[[{"diffs":[[0,"        "],[-1,"  "],[1,"pos: pos,\n            params: [],\n            pack: [],\n            name: name,\n            meta: [],\n            kind: TypeDefKind.TDClass(),\n            isExtern: false,\n            fields: fields"],[0,"\n       "]],"start1":833,"start2":833,"length1":18,"length2":214}]],"length":1955,"saved":false}
