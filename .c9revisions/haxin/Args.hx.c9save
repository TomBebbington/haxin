{"ts":1372678319552,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"package haxin;\nusing Lambda;\nclass Args {\n\tstatic var REGEX_ARGS(default, null) = ~/-([a-zA-Z0-9-]*) ([^- ][^ ]*)/;\n\tstatic var REGEX_FLAGS(default, null) = ~/-([a-zA-Z0-9-]*)/;\n\tpublic var vals(default, null):Map<String, String>;\n\tpublic var flags(default, null):Array<String>;\n\tpublic var args(default, null):Array<String>;\n\tpublic function new(ovals:Array<String>) {\n\t\tif(sys.FileSystem.exists(ovals[ovals.length-1]) && sys.FileSystem.isDirectory(ovals[ovals.length-1]))\n\t\t\tovals = ovals.slice(0, ovals.length-1);\n\t\tvar avals = ovals.join(\" \");\n\t\tvals = new Map<String, String>();\n\t\tfor(arg in matches(avals, REGEX_ARGS, 2))\n\t\t\tvals.set(arg[0], arg[1]);\n\t\twhile(REGEX_ARGS.match(avals))\n\t\t\tavals = REGEX_ARGS.replace(avals, \"\");\n\t\tflags = matches(avals, REGEX_FLAGS, 1)[0];\n\t\twhile(REGEX_FLAGS.match(avals))\n\t\t\tavals = REGEX_FLAGS.replace(avals, \"\");\n\t\targs = [for(v in avals.split(\" \")) if(v.length > 0) v];\n\t}\n\tstatic function matches(s:String, r:EReg, ms:Int):Array<Array<String>> {\n\t\tvar a = [];\n\t\tvar pos = 0;\n\t\twhile(r.matchSub(s, pos)) {\n\t\t\tvar cpos = r.matchedPos();\n\t\t\tvar ma = [];\n\t\t\tfor(i in 0...ms+1)\n\t\t\t\tma[i] = r.matched(i);\n\t\t\tma = ma.slice(1);\n\t\t\ta.push(ma);\n\t\t\tpos = cpos.pos + cpos.len;\n\t\t}\n\t\treturn a;\n\t}\n\tpublic inline function has(id:String):Bool {\n\t\treturn flags.indexOf(id) != -1;\n\t}\n\tpublic inline function get(id:String, ?def:String):String {\n\t\treturn vals.exists(id) ? vals.get(id) : def;\n\t}\n}"]],"start1":0,"start2":0,"length1":0,"length2":1422}]],"length":1422}
